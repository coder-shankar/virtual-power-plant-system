plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jvm-test-suite'
    id 'jacoco'
}

group = 'org.vpp'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }

}


sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')

        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('integrationTest', Test) {
    description = "Runs the integration tests."
    group = "verification"

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()

    shouldRunAfter test

    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/integrationTest.exec")
    }


}

tasks.register('jacocoMergedReport', JacocoReport) {
    dependsOn test, integrationTest

    executionData.setFrom(files(
            "${buildDir}/jacoco/test.exec",
            "${buildDir}/jacoco/integrationTest.exec"
    ))

    sourceDirectories.setFrom files(sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(sourceSets.main.output)

    reports {
        html.required.set(true)
        xml.required.set(false)
        csv.required.set(false)
    }

}
tasks.processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}